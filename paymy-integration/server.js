const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(bodyParser.json());
app.use(cors());
app.use(express.static('public')); // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ HTML

const LOGIN = "Paycom";
const PASSWORD = process.env.PAYME_SECRET_KEY || "95n%ceFHPhU8G3UdiO3dt1g3EbpV8KFS66y9"; 
const MERCHANT_ID = process.env.PAYME_MERCHANT_ID || "***–í–°–¢–ê–í–¨–¢–ï_–í–ê–®_MERCHANT_ID***";
const EXPECTED_AUTH = "Basic " + Buffer.from(`${LOGIN}:${PASSWORD}`).toString('base64');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
const transactions = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è Mini App
const orders = new Map();

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const testOrders = new Map([
  ['TEST_ORDER_001', { order_id: 'TEST_ORDER_001', amount: 50000, status: 'pending' }],
  ['TEST_ORDER_002', { order_id: 'TEST_ORDER_002', amount: 100000, status: 'pending' }],
  ['12345', { order_id: '12345', amount: 1000, status: 'pending' }]
]);

// ============== –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø MINI APP ==============

// 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.post('/api/pay/create', (req, res) => {
    try {
        const { amount = 50000, description = 'Premium –¥–æ—Å—Ç—É–ø' } = req.body;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        const orderId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ testOrders —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Payme API
        testOrders.set(orderId, { 
            order_id: orderId, 
            amount: amount, 
            status: 'pending' 
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        orders.set(orderId, {
            id: orderId,
            amount: amount,
            description: description,
            status: 'pending',
            created_at: new Date()
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        const payUrl = `https://checkout.paycom.uz/${Buffer.from(`m=${MERCHANT_ID};ac.order_id=${orderId};a=${amount};c=${encodeURIComponent(description)}`).toString('base64')}`;

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ${orderId} –Ω–∞ —Å—É–º–º—É ${amount} —Ç–∏–π–∏–Ω–æ–≤`);

        res.json({
            success: true,
            order_id: orderId,
            pay_url: payUrl,
            amount: amount,
            description: description
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.get('/api/pay/status/:orderId', (req, res) => {
    try {
        const orderId = req.params.orderId;
        const order = orders.get(orderId);
        
        if (!order) {
            return res.status(404).json({
                success: false,
                error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        const successfulTransaction = Array.from(transactions.values())
            .find(tx => tx.account?.order_id === orderId && tx.state === 2);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        const cancelledTransaction = Array.from(transactions.values())
            .find(tx => tx.account?.order_id === orderId && (tx.state === -1 || tx.state === -2));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (successfulTransaction) {
            order.status = 'completed';
            order.completed_at = new Date(successfulTransaction.perform_time);
        } else if (cancelledTransaction) {
            order.status = 'cancelled';
            order.cancelled_at = new Date(cancelledTransaction.cancel_time);
        }
        
        res.json({
            success: true,
            order: {
                id: order.id,
                status: order.status,
                amount: order.amount,
                description: order.description,
                created_at: order.created_at,
                completed_at: order.completed_at || null,
                cancelled_at: order.cancelled_at || null
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// 3. –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
app.get('/payment-success', (req, res) => {
    const orderId = req.query.order_id;
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>–û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .success { color: green; font-size: 24px; margin-bottom: 20px; }
                .order-id { color: #666; margin-bottom: 30px; }
                .btn { background: #0088cc; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; }
            </style>
        </head>
        <body>
            <div class="success">‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</div>
            <div class="order-id">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}</div>
            <a href="#" onclick="window.close()" class="btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</a>
            
            <script>
                setTimeout(() => window.close(), 3000);
                if (window.opener) {
                    window.opener.postMessage({
                        type: 'PAYMENT_SUCCESS',
                        orderId: '${orderId}'
                    }, '*');
                }
            </script>
        </body>
        </html>
    `);
});

// ============== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô PAYME API ==============

// Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è /paycom)
app.use('/paycom', (req, res, next) => {
  const authHeader = req.headers['authorization'];
  if (!authHeader || authHeader !== EXPECTED_AUTH) {
    return res.status(200).json({
      jsonrpc: "2.0",
      id: req.body?.id || null,
      error: {
        code: -32504,
        message: "Insufficient privileges"
      }
    });
  }
  next();
});

app.post('/paycom', (req, res) => {
  const { method, id, params } = req.body;
  console.log("üì© –ó–∞–ø—Ä–æ—Å:", method, params);

  switch (method) {
    case 'CheckPerformTransaction':
      const orderId = params.account?.order_id;
      const amount = params.amount;
      
      if (!orderId) {
        return res.json({
          jsonrpc: "2.0",
          error: { code: -31050, message: "Order ID not provided" },
          id
        });
      }

      const order = testOrders.get(orderId);
      if (!order) {
        console.log(`‚ùå –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return res.json({
          jsonrpc: "2.0",
          error: { code: -31050, message: "Order not found" },
          id
        });
      }

      if (order.amount !== amount) {
        console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}. –û–∂–∏–¥–∞–µ—Ç—Å—è: ${order.amount}, –ø–æ–ª—É—á–µ–Ω–æ: ${amount}`);
        return res.json({
          jsonrpc: "2.0",
          error: { code: -31001, message: "Incorrect amount" },
          id
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const existingActiveTransaction = Array.from(transactions.values())
        .find(tx => tx.account.order_id === orderId && (tx.state === 1 || tx.state === 2));

      if (existingActiveTransaction) {
        console.log(`‚ùå –ó–∞–∫–∞–∑ ${orderId} —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ${existingActiveTransaction.id}`);
        return res.json({
          jsonrpc: "2.0",
          error: { code: -31099, message: "Order already has active transaction" },
          id
        });
      }

      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –Ω–∞–π–¥–µ–Ω, —Å—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç`);
      res.json({ jsonrpc: "2.0", result: { allow: true }, id });
      break;

    case 'CreateTransaction':
      const transactionId = params.id;
      const createOrderId = params.account?.order_id;
      const createAmount = params.amount;
      const createTime = params.time;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
      const createOrder = testOrders.get(createOrderId);
      if (!createOrder) {
        return res.json({
          jsonrpc: "2.0",
          error: { code: -31050, message: "Order not found" },
          id
        });
      }

      // –ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û–°–¢–¨: –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (transactions.has(transactionId)) {
        const existingTx = transactions.get(transactionId);
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ CreateTransaction –¥–ª—è ${transactionId}`);
        return res.json({
          jsonrpc: "2.0",
          result: {
            create_time: existingTx.create_time,
            transaction: existingTx.id,
            state: existingTx.state
          },
          id
        });
      }

      // –ó–ê–©–ò–¢–ê –û–¢ –î–í–û–ô–ù–û–ô –û–ü–õ–ê–¢–´: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const existingTransaction = Array.from(transactions.values())
        .find(tx => tx.account.order_id === createOrderId && (tx.state === 1 || tx.state === 2));

      if (existingTransaction) {
        console.log(`‚ùå –ó–∞–∫–∞–∑ ${createOrderId} —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ${existingTransaction.id}. –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${transactionId}`);
        return res.json({
          jsonrpc: "2.0",
          error: { 
            code: -31099, 
            message: "Order already has active transaction. Cannot create multiple transactions for single-payment order." 
          },
          id
        });
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const newTransaction = {
        id: transactionId,
        amount: createAmount,
        account: params.account,
        state: 1,
        create_time: createTime,
        perform_time: null,
        cancel_time: null,
        reason: null
      };

      transactions.set(transactionId, newTransaction);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      if (orders.has(createOrderId)) {
        const order = orders.get(createOrderId);
        order.status = 'processing';
        orders.set(createOrderId, order);
      }
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${transactionId} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${createOrderId}`);
      
      res.json({
        jsonrpc: "2.0",
        result: {
          create_time: newTransaction.create_time,
          transaction: newTransaction.id,
          state: 1
        },
        id
      });
      break;

    case 'PerformTransaction':
      const performTxId = params.id;
      
      if (!transactions.has(performTxId)) {
        console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${performTxId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return res.json({
          jsonrpc: "2.0",
          error: { code: -31050, message: "Transaction not found" },
          id
        });
      }

      const tx = transactions.get(performTxId);
      
      // –ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û–°–¢–¨: –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (tx.state === 2) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ PerformTransaction –¥–ª—è ${performTxId}`);
        return res.json({
          jsonrpc: "2.0",
          result: {
            perform_time: tx.perform_time,
            transaction: tx.id,
            state: 2
          },
          id
        });
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      tx.state = 2;
      tx.perform_time = Date.now();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const performOrderId = tx.account?.order_id;
      if (orders.has(performOrderId)) {
        const order = orders.get(performOrderId);
        order.status = 'completed';
        order.completed_at = new Date(tx.perform_time);
        orders.set(performOrderId, order);
      }
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${performTxId} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
      res.json({
        jsonrpc: "2.0",
        result: {
          perform_time: tx.perform_time,
          transaction: tx.id,
          state: 2
        },
        id
      });
      break;

    case 'CancelTransaction':
      const cancelTxId = params.id;
      const reason = params.reason;
      
      if (!transactions.has(cancelTxId)) {
        console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${cancelTxId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return res.json({
          jsonrpc: "2.0",
          error: { code: -31050, message: "Transaction not found" },
          id
        });
      }

      const cancelTx = transactions.get(cancelTxId);
      
      // –ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û–°–¢–¨: –ï—Å–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (cancelTx.state === -1 || cancelTx.state === -2) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ CancelTransaction –¥–ª—è ${cancelTxId}`);
        return res.json({
          jsonrpc: "2.0",
          result: {
            cancel_time: cancelTx.cancel_time,
            transaction: cancelTx.id,
            state: cancelTx.state
          },
          id
        });
      }

      // –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      cancelTx.state = reason === 1 ? -1 : -2;
      cancelTx.cancel_time = Date.now();
      cancelTx.reason = reason;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const cancelOrderId = cancelTx.account?.order_id;
      if (orders.has(cancelOrderId)) {
        const order = orders.get(cancelOrderId);
        order.status = 'cancelled';
        order.cancelled_at = new Date(cancelTx.cancel_time);
        orders.set(cancelOrderId, order);
      }
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${cancelTxId} –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π ${reason}`);
      res.json({
        jsonrpc: "2.0",
        result: {
          cancel_time: cancelTx.cancel_time,
          transaction: cancelTx.id,
          state: cancelTx.state
        },
        id
      });
      break;

    case 'CheckTransaction':
      const checkTxId = params.id;
      
      if (!transactions.has(checkTxId)) {
        console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${checkTxId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return res.json({
          jsonrpc: "2.0",
          error: { code: -31050, message: "Transaction not found" },
          id
        });
      }

      const checkTx = transactions.get(checkTxId);
      console.log(`‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${checkTxId}, reason: ${checkTx.reason}`);
      
      res.json({
        jsonrpc: "2.0",
        result: {
          create_time: checkTx.create_time,
          perform_time: checkTx.perform_time || 0,
          cancel_time: checkTx.cancel_time || 0,
          transaction: checkTx.id,
          state: checkTx.state,
          reason: checkTx.reason
        },
        id
      });
      break;

    case 'GetStatement':
      const from = params.from || 0;
      const to = params.to || Date.now();
      const transactionsList = Array.from(transactions.values())
        .filter(tx => tx.create_time >= from && tx.create_time <= to)
        .map(tx => ({
          id: tx.id,
          time: tx.create_time,
          amount: tx.amount,
          account: tx.account,
          create_time: tx.create_time,
          perform_time: tx.perform_time || 0,
          cancel_time: tx.cancel_time || 0,
          transaction: tx.id,
          state: tx.state,
          reason: tx.reason
        }));
      
      console.log(`‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å ${from} –ø–æ ${to}, –Ω–∞–π–¥–µ–Ω–æ: ${transactionsList.length}`);
      res.json({
        jsonrpc: "2.0",
        result: {
          transactions: transactionsList
        },
        id
      });
      break;

    default:
      console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: ${method}`);
      res.json({
        jsonrpc: "2.0",
        error: { code: -32601, message: "Method not found" },
        id
      });
  }
});

// ============== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´ ==============

// –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
app.get('/test-orders', (req, res) => {
  res.json({
    orders: Array.from(testOrders.values()),
    info: "–≠—Ç–∏ –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Paycom API"
  });
});

// Endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/transactions', (req, res) => {
  res.json({
    transactions: Array.from(transactions.values()),
    count: transactions.size
  });
});

// –ù–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ Mini App
app.get('/orders', (req, res) => {
  res.json({
    orders: Array.from(orders.values()),
    count: orders.size,
    info: "–ó–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Mini App"
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üí≥ Payme Merchant ID: ${MERCHANT_ID}`);
  console.log(`üîê Secret Key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${PASSWORD ? '–î–∞' : '–ù–µ—Ç'}`);
  console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);
  console.log(`  üÜï POST /api/pay/create - –°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –¥–ª—è Mini App`);
  console.log(`  üÜï GET /api/pay/status/:orderId - –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è Mini App`);
  console.log(`  üÜï GET /payment-success - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã`);
  console.log(`  üÜï GET /orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ Mini App`);
  console.log(`  üì° POST /paycom - Callback –æ—Ç Payme`);
  console.log(`  üîß GET /test-orders - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
  console.log(`  üîß GET /transactions - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:`);
  testOrders.forEach(order => {
    console.log(`   - ${order.order_id}: ${order.amount} —Ç–∏–π–∏–Ω–æ–≤`);
  });
  console.log(`üí° –õ–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã: –û–î–ù–û–†–ê–ó–û–í–ê–Ø (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π –æ–ø–ª–∞—Ç—ã)`);
  console.log(`üîí –ó–∞—â–∏—Ç–∞: -31099 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞`);
  console.log(`üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ reason –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
  console.log(`üéØ Mini App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ì–û–¢–û–í–ê`);
});
